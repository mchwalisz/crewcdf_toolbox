function [ p ] = crewcdf_rsfsv( fileName, varargin )
%CREWCDF_RSFSV Loads Rohde & Schwarz trace in ASCII format into crew cdf
%
%   It is possible to load files generated by Rohde & Schwarz
%   trace recorder.
%
%   See also CREWCDF_STRUCT, CREWCDF_WISPY, CREWCDF_IMEC, CREWCDF_TELOS

%   Mikolaj Chwalisz for CREW, COUWBAT

iP = inputParser;
iP.addRequired('fileName', @ischar);
iP.addParamValue('Name','');
iP.addParamValue('Location',[0, 0, 0]);
iP.parse(fileName, varargin{:});
options = iP.Results;
if isempty(options.Name)
    [ path, options.Name] = fileparts(fileName);
    % options.Name = strrep(options.Name, '-', '');
end

p = struct( ...
    'Name'       , options.Name, ...
    'Location'   , options.Location, ...
    'CenterFreq' , [] , ...
    'BW'         , 0, ...
    'Tstart'     , '01-Jan-1970 00:00:00', ...
    'SampleTime' , [], ...
    'Power'      , [], ...
    'Meta'       , struct());

delimiter = ';';


fileId = fopen(fileName);
fline = fgets(fileId);

while ischar(fline)
    fline = deblank(fline);
    if isempty(fline)
        fline = fgets(fileId);
        continue
    end
    item = strsplit(fline, delimiter);
    name = genvarname(regexprep(char(item(1)),'[^\w]','_'));
    val = str2num(char(item(2)));
    if isempty(val)
        p.Meta.(name) = char(item(2));
    else
        p.Meta.(name) = val;
        if length(item) == 3
            p.Meta.([name '_Unit']) = char(item(3));
        end
    end
    if strcmpi(name, 'values')
        % All Meta data has been read, from the next line it is only data
        break
    end
    fline = fgets(fileId);
end
% Read the first section to get correct data sizes
fline = deblank(fgets(fileId));
item = strsplit(fline, delimiter);
SampleTime = char(item(2));
p.Tstart = datestr(datenum(SampleTime,'yyyy.mm.dd_HH.MM.SS:FFF'));
tStart_epoch = (datenum(p.Tstart)-datenum(1970,1,1)) * 86400;

% Read first data
fline = fgets(fileId);
item = strsplit(fline, delimiter);
val = cellfun(@str2double,item);
format = ['%s %s ' repmat('%f ',[1,size(val,2)]) ];
c = textscan(fileId, format, 'delimiter', {delimiter, '\n'}, ...
    'ReturnOnError', 0);
% Get time samples
stdatenum = datenum([SampleTime; c{2}], 'yyyy.mm.dd_HH.MM.SS:FFF');
p.SampleTime = ((stdatenum - datenum(1970,1,1))*86400) - tStart_epoch;

% Get measurement values
p.Power = [val; cell2mat(c(3:end))];

% Calcultate frequencies
p.CenterFreq = linspace(p.Meta.Start, p.Meta.Stop, size(p.Power,2));

% Calculate BW

p.BW = (p.Meta.Stop - p.Meta.Start)/ p.Meta.Values;
fclose(fileId);
end
